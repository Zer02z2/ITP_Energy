[
    {
        "id": "7274d2a37cb1887b",
        "type": "tab",
        "label": "Receving MQTT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3dedd0349bb5842f",
        "type": "function",
        "z": "7274d2a37cb1887b",
        "name": "generate audio buffer",
        "func": "let sam = flow.get(\"sam\");\n\nlet buf8 = sam.buf8(msg.payload);\n\nlet buffer = Buffer.from(buf8.buffer);\nmsg.payload = buffer;\nflow.set(\"updated\", true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nlet SamJs = global.get('SamJs');\n\nlet opts = {\n    debug: 1,\n    pitch: 60,\n    speed: 92,\n    mouth: 190,\n    throat: 190\n};\n\nlet sam = new SamJs(opts);\n\nflow.set(\"sam\", sam);",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 540,
        "wires": [
            [
                "b0793b5cf1f2a7e0",
                "e6ac93f303179728"
            ]
        ]
    },
    {
        "id": "ad9c9360c9c4dc3a",
        "type": "switch",
        "z": "7274d2a37cb1887b",
        "name": "get rid of Count",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "count",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "light",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 680,
        "y": 280,
        "wires": [
            [
                "de759706317a8a01",
                "d8710bd74fe7bd7b"
            ],
            [
                "d8710bd74fe7bd7b"
            ],
            [
                "95aec448544a4731",
                "d8710bd74fe7bd7b"
            ]
        ]
    },
    {
        "id": "e6ac93f303179728",
        "type": "wav-headers",
        "z": "7274d2a37cb1887b",
        "name": "",
        "action": "add",
        "channels": 1,
        "samplerate": "24000",
        "bitwidth": "8",
        "x": 710,
        "y": 540,
        "wires": [
            [
                "37513d534fb7c7dc",
                "9e5c8778d525a666",
                "2a0df58ff38b69b8"
            ],
            []
        ]
    },
    {
        "id": "37513d534fb7c7dc",
        "type": "file",
        "z": "7274d2a37cb1887b",
        "name": "write report.wav",
        "filename": "/home/zongze/ITP-energy/report.wav",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 960,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "2b72c6e6f7ec55df",
        "type": "debug",
        "z": "7274d2a37cb1887b",
        "name": "joined sentence",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 380,
        "wires": []
    },
    {
        "id": "9e5c8778d525a666",
        "type": "debug",
        "z": "7274d2a37cb1887b",
        "name": "audio buffer",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 500,
        "wires": []
    },
    {
        "id": "85454ca916179169",
        "type": "comment",
        "z": "7274d2a37cb1887b",
        "name": "Receive MQTT messages",
        "info": "",
        "x": 210,
        "y": 280,
        "wires": []
    },
    {
        "id": "072a6662fb67226b",
        "type": "comment",
        "z": "7274d2a37cb1887b",
        "name": "Parse the messages into sentences",
        "info": "",
        "x": 180,
        "y": 420,
        "wires": []
    },
    {
        "id": "60cf0f5780e975e4",
        "type": "comment",
        "z": "7274d2a37cb1887b",
        "name": "Generate sound file",
        "info": "",
        "x": 230,
        "y": 540,
        "wires": []
    },
    {
        "id": "9e94a0f45ce18087",
        "type": "http in",
        "z": "7274d2a37cb1887b",
        "name": "Request audio file",
        "url": "/getAudio",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 470,
        "y": 840,
        "wires": [
            [
                "f8f5f10629b78833"
            ]
        ]
    },
    {
        "id": "f8f5f10629b78833",
        "type": "file in",
        "z": "7274d2a37cb1887b",
        "name": "read report.wav",
        "filename": "/home/zongze/ITP-energy/report.wav",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 700,
        "y": 840,
        "wires": [
            [
                "442a1eade97a46aa"
            ]
        ]
    },
    {
        "id": "6c6dc7bdce9dd6fc",
        "type": "http response",
        "z": "7274d2a37cb1887b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 840,
        "wires": []
    },
    {
        "id": "442a1eade97a46aa",
        "type": "change",
        "z": "7274d2a37cb1887b",
        "name": "Add header",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "audio/wav",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 840,
        "wires": [
            [
                "6c6dc7bdce9dd6fc",
                "8d96d6eb68757420"
            ]
        ]
    },
    {
        "id": "8d96d6eb68757420",
        "type": "debug",
        "z": "7274d2a37cb1887b",
        "name": "requested audio",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 800,
        "wires": []
    },
    {
        "id": "6c1b598d8bed95d4",
        "type": "file",
        "z": "7274d2a37cb1887b",
        "name": "write data.txt",
        "filename": "/home/zongze/ITP-energy/data.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1330,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "14d4ea7d20e1aef1",
        "type": "http in",
        "z": "7274d2a37cb1887b",
        "name": "",
        "url": "/getData",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 450,
        "y": 660,
        "wires": [
            [
                "cc719ed2d1cdf258"
            ]
        ]
    },
    {
        "id": "cc719ed2d1cdf258",
        "type": "file in",
        "z": "7274d2a37cb1887b",
        "name": "read data.txt",
        "filename": "/home/zongze/ITP-energy/data.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 630,
        "y": 660,
        "wires": [
            [
                "a6bdbb2db3a1595d"
            ]
        ]
    },
    {
        "id": "ab7b716e9adbf3b3",
        "type": "http response",
        "z": "7274d2a37cb1887b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1030,
        "y": 660,
        "wires": []
    },
    {
        "id": "a6bdbb2db3a1595d",
        "type": "change",
        "z": "7274d2a37cb1887b",
        "name": "add JSON header",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "application/json",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 660,
        "wires": [
            [
                "ab7b716e9adbf3b3"
            ]
        ]
    },
    {
        "id": "2a0df58ff38b69b8",
        "type": "websocket out",
        "z": "7274d2a37cb1887b",
        "name": "",
        "server": "2b2a4ab97967c38d",
        "client": "",
        "x": 950,
        "y": 580,
        "wires": []
    },
    {
        "id": "7312229c6266f56d",
        "type": "join",
        "z": "7274d2a37cb1887b",
        "name": "joining MQTTS",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "5",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1140,
        "y": 280,
        "wires": [
            [
                "6c1b598d8bed95d4",
                "2ed29bb7b4a198e3"
            ]
        ]
    },
    {
        "id": "fc0d2f1f7a911be5",
        "type": "function",
        "z": "7274d2a37cb1887b",
        "name": "clean up topic",
        "func": "msg.topic = msg.topic.split(\"/\")[1];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 280,
        "wires": [
            [
                "ad9c9360c9c4dc3a"
            ]
        ]
    },
    {
        "id": "d72734c51a9183ca",
        "type": "function",
        "z": "7274d2a37cb1887b",
        "name": "generate report",
        "func": "let numToWords = flow.get(\"numToWords\");\nlet report = \" , , \";\n\nfor (let [topic, value] of Object.entries(msg.payload)) {\n\n    if (topic == \"humidity\") {\n        value = numToWords(value.split(\" \")[0]) + \" gram per kilogram\";\n    }\n    else if (topic == \"temp\") {\n        topic = \"temperature\";\n        value = numToWords(value.split(\" \")[0]) + \" degree celsius\";\n    }\n    else if (topic == \"pressure\") {\n        value = numToWords(value.split(\" \")[0]) + \" h-p-a\";\n    }\n    else if (topic == \"AQI\") {\n        topic = \"Air quality index\";\n        value = numToWords(value.toString());\n    }\n    else if (topic == \"TVOC\") {\n        topic = \"T-V-O-C\";\n        value = numToWords(value.split(\" \")[0]) + \" p-p-b\";\n    }\n    else if (topic == \"CO2\") {\n        topic = \"C-O-2\";\n        value = numToWords(value.split(\"ppb\")[0]) + \" p-p-m\";\n    }\n    else if (topic == \"light\") {\n        topic = \"Light intensity\";\n        value = numToWords(value.toString());\n    }\n    report += `${topic} is ${value}. `;\n}\nreport += \"Report finished!\"\nmsg.payload = report;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nlet converter = global.get(\"converter\");\n\nlet numToWords = (numberString) => {\n    let numbers = numberString.split(\".\")\n    let integer = parseInt(numbers[0]);\n    let decimal = numbers[1] || \"zero\";\n\n    let integerWord = converter.toWords(integer);\n    let phrase = integerWord + \" point \" + decimal;\n    return phrase;\n}\n\nflow.set(\"numToWords\", numToWords);",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 420,
        "wires": [
            [
                "e9259c779e1330e5"
            ]
        ]
    },
    {
        "id": "95aec448544a4731",
        "type": "join",
        "z": "7274d2a37cb1887b",
        "name": "joining MQTTS",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 460,
        "y": 420,
        "wires": [
            [
                "d72734c51a9183ca"
            ]
        ]
    },
    {
        "id": "637fb2ce2ef424df",
        "type": "comment",
        "z": "7274d2a37cb1887b",
        "name": "write to data base",
        "info": "",
        "x": 930,
        "y": 200,
        "wires": []
    },
    {
        "id": "de759706317a8a01",
        "type": "function",
        "z": "7274d2a37cb1887b",
        "name": "inject time",
        "func": "msg.topic = \"time\";\nlet timeNow = new Date(Date.now() - 4 * 60 * 60 * 1000).toLocaleString();\nmsg.payload = timeNow;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 240,
        "wires": [
            [
                "7312229c6266f56d"
            ]
        ]
    },
    {
        "id": "2ed29bb7b4a198e3",
        "type": "debug",
        "z": "7274d2a37cb1887b",
        "name": "joined object",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 240,
        "wires": []
    },
    {
        "id": "d8710bd74fe7bd7b",
        "type": "delay",
        "z": "7274d2a37cb1887b",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 910,
        "y": 280,
        "wires": [
            [
                "7312229c6266f56d"
            ]
        ]
    },
    {
        "id": "10414433f3bdeeb0",
        "type": "websocket out",
        "z": "7274d2a37cb1887b",
        "name": "to browser",
        "server": "2e733719eb0925d3",
        "client": "",
        "x": 1110,
        "y": 420,
        "wires": []
    },
    {
        "id": "b0793b5cf1f2a7e0",
        "type": "debug",
        "z": "7274d2a37cb1887b",
        "name": "buffer from node",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 580,
        "wires": []
    },
    {
        "id": "d0e680da8c59278e",
        "type": "comment",
        "z": "7274d2a37cb1887b",
        "name": "Serve the audio file",
        "info": "",
        "x": 230,
        "y": 840,
        "wires": []
    },
    {
        "id": "08db329afdb6d828",
        "type": "comment",
        "z": "7274d2a37cb1887b",
        "name": "Serve the data file",
        "info": "",
        "x": 230,
        "y": 660,
        "wires": []
    },
    {
        "id": "e9259c779e1330e5",
        "type": "function",
        "z": "7274d2a37cb1887b",
        "name": "inject time message",
        "func": "let converter = global.get(\"converter\");\n\nlet timeNow = new Date(Date.now() - 4 * 60 * 60 * 1000).toLocaleString();\nlet months = [\"January\", \"Feburary\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nlet [dateAndYear, time] = timeNow.split(\", \");\nlet [month, date, year] = dateAndYear.split(\"/\");\nlet [hour, min, sec, amOrpm] = time.split(/[: ]/);\n\nmonth = months[parseInt(month) - 1];\ndate = converter.toWordsOrdinal(parseInt(date));\nlet [year1, year2] = [year.slice(0, 2), year.slice(2, 4)];\nyear1 = converter.toWords(parseInt(year1));\nyear2 = converter.toWords(parseInt(year2));\nyear = year1 + \" \" + year2;\ndateAndYear = month + \" \" + date + \", \" + year;\n\nhour = converter.toWords(parseInt(hour));\nmin = converter.toWords(parseInt(min));\n//amOrpm = amOrpm.slice(0, 1) + \"-\" + amOrpm.slice(1, 2);\ntime = hour + \", \" + min + \" \";\n\nlet message = \"Now it is \" + time + \", \" + dateAndYear + \". This is Sun Watcher One reporting from the navy yard. \";\nmsg.payload = message + msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 420,
        "wires": [
            [
                "3dedd0349bb5842f",
                "2b72c6e6f7ec55df",
                "10414433f3bdeeb0"
            ]
        ]
    },
    {
        "id": "c4711fd463cea9af",
        "type": "http in",
        "z": "7274d2a37cb1887b",
        "name": "Request update status",
        "url": "/getUpdate",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 480,
        "y": 780,
        "wires": [
            [
                "a1ab91f3c4cc1434"
            ]
        ]
    },
    {
        "id": "57853d946124d1f3",
        "type": "comment",
        "z": "7274d2a37cb1887b",
        "name": "Check whether audio is new",
        "info": "",
        "x": 200,
        "y": 780,
        "wires": []
    },
    {
        "id": "a1ab91f3c4cc1434",
        "type": "function",
        "z": "7274d2a37cb1887b",
        "name": "get update status",
        "func": "let updated = flow.get(\"updated\") || true;\nmsg.payload = updated;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 780,
        "wires": [
            [
                "d5c473648dc5d841"
            ]
        ]
    },
    {
        "id": "d5c473648dc5d841",
        "type": "http response",
        "z": "7274d2a37cb1887b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 890,
        "y": 780,
        "wires": []
    },
    {
        "id": "39f6f21d8f40d3f5",
        "type": "http in",
        "z": "7274d2a37cb1887b",
        "name": "Post update status",
        "url": "/postUpdate",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 470,
        "y": 900,
        "wires": [
            [
                "ecbd4a99bc2b13bf"
            ]
        ]
    },
    {
        "id": "ecbd4a99bc2b13bf",
        "type": "function",
        "z": "7274d2a37cb1887b",
        "name": "function 8",
        "func": "flow.set(\"updated\", false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 900,
        "wires": [
            [
                "a5f31a10b6a4f6d6"
            ]
        ]
    },
    {
        "id": "a5f31a10b6a4f6d6",
        "type": "http response",
        "z": "7274d2a37cb1887b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 900,
        "wires": []
    },
    {
        "id": "cf60949194580b6c",
        "type": "comment",
        "z": "7274d2a37cb1887b",
        "name": "Update if audio successfully downloaded",
        "info": "",
        "x": 160,
        "y": 900,
        "wires": []
    },
    {
        "id": "c397e8b63f58a76a",
        "type": "mqtt in",
        "z": "7274d2a37cb1887b",
        "name": "All MQTT",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "7961d7c24e47da7b",
        "nl": true,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 440,
        "y": 120,
        "wires": [
            [
                "f3291e3884587613"
            ]
        ]
    },
    {
        "id": "ae74f3a6db3f76f2",
        "type": "function",
        "z": "7274d2a37cb1887b",
        "name": "format to JSON",
        "func": "let id = msg.topic;\nlet data = parseInput(msg.payload);\nlet time = new Date(Date.now() - 4 * 60 * 60 * 1000).toLocaleString();\n\n\nmsg.topic = `INSERT INTO skylab VALUES (\"${id}\", '${data}', \"${time}\");`;\nmsg.payload = msg.topic;\nreturn msg;\n\nfunction parseInput(data) {\n    try {\n        JSON.stringify(data);\n    } catch (e) {\n        return data.toString();\n    }\n    return JSON.stringify(data);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 120,
        "wires": [
            [
                "51fc5c5958bcf5c4",
                "4ed50cfc3dd60e28"
            ]
        ]
    },
    {
        "id": "4ed50cfc3dd60e28",
        "type": "debug",
        "z": "7274d2a37cb1887b",
        "name": "all data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 80,
        "wires": []
    },
    {
        "id": "53333377ac9a2ca4",
        "type": "file",
        "z": "7274d2a37cb1887b",
        "name": "write data_all.txt",
        "filename": "/home/zongze/ITP-energy/data_all.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 840,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b80996b945bd0aa8",
        "type": "comment",
        "z": "7274d2a37cb1887b",
        "name": "Receiving everyone's data",
        "info": "",
        "x": 210,
        "y": 120,
        "wires": []
    },
    {
        "id": "68506233d198af00",
        "type": "http in",
        "z": "7274d2a37cb1887b",
        "name": "",
        "url": "/energy",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 450,
        "y": 1120,
        "wires": [
            [
                "60f9891f1bbbbdf0"
            ]
        ]
    },
    {
        "id": "1b32b653176d1a99",
        "type": "http response",
        "z": "7274d2a37cb1887b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 1120,
        "wires": []
    },
    {
        "id": "d789d81cba1ac087",
        "type": "comment",
        "z": "7274d2a37cb1887b",
        "name": "Web client",
        "info": "",
        "x": 280,
        "y": 1120,
        "wires": []
    },
    {
        "id": "f3291e3884587613",
        "type": "switch",
        "z": "7274d2a37cb1887b",
        "name": "Is it our group?",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Sun-Watcher-01",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 120,
        "wires": [
            [
                "fc0d2f1f7a911be5",
                "ae74f3a6db3f76f2"
            ],
            [
                "ae74f3a6db3f76f2"
            ]
        ]
    },
    {
        "id": "60f9891f1bbbbdf0",
        "type": "template",
        "z": "7274d2a37cb1887b",
        "name": "web client to acces data",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n    <head>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n        <link href=\"https://fonts.googleapis.com/css2?family=Ubuntu+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap\" rel=\"stylesheet\">\n        <style>\n            .ubuntu-mono-regular {\n                font-family: \"Ubuntu Mono\", monospace;\n                font-weight: 400;\n                font-style: normal;\n                }\n\n            .ubuntu-mono-bold {\n            font-family: \"Ubuntu Mono\", monospace;\n            font-weight: 700;\n            font-style: normal;\n            }\n\n            .ubuntu-mono-regular-italic {\n            font-family: \"Ubuntu Mono\", monospace;\n            font-weight: 400;\n            font-style: italic;\n            }\n\n            .ubuntu-mono-bold-italic {\n            font-family: \"Ubuntu Mono\", monospace;\n            font-weight: 700;\n            font-style: italic;\n            }\n\n            body {\n                font-family: \"Ubuntu Mono\";\n                padding: 3rem;\n                background-color: rgba(230, 230, 230, 1);\n                color: rgba(20, 20, 20, 1);\n            }\n            th, td {\n                padding: 0.5rem 8rem 1rem 0.5rem;\n                text-align: left;\n            }\n            table {\n                \n            }\n            input {\n                width: 40vw;\n                padding: 1rem;\n                font-family: \"Ubuntu Mono\";\n                border: none;\n                background-color: rgba(250, 250, 250, 1);\n                &:focus {\n                    outline: none;\n                }\n            }\n            button {\n                padding: 0.5rem 1rem;\n                cursor: pointer;\n                font-family: \"Ubuntu Mono\";\n                border: none;\n                background-color: rgba(20, 20, 20, 1);\n                border-radius: 0px;\n                color: rgba(230, 230, 230, 1);\n                font-size: 1em;\n            }\n            #previous,#next {\n                background-color: rgba(0, 0, 0, 0);\n                color: rgba(20, 20, 20, 1);\n                &:hover {\n                    text-decoration: underline;\n                }\n            }\n        </style>\n    </head>\n    <body>\n        <h1>ITP Energy Skylab Database</h1>\n        <h2>Topic filter</h2>\n        <input id=\"filter\" placeholder=\"e.g. /test_data/count, test_data, test, count, etc.\"></input><br><br>\n        <button id=\"search\">Search</button>\n        <br><br>\n        <p id=\"feedback\"></p>\n        <table id=\"content\" border=1 frame=void rules=rows></table>\n        <table id=\"navi\">\n            <tr>\n                <td><button id=\"previous\">Previous</button></td>\n                <td><p id=\"pageCount\"></p></td>\n                <td><button id=\"next\">Next</button></td>\n            </tr>\n        </table>\n        <script>\n            let page = 0;\n            let content = document.getElementById(\"content\");\n            let filter = document.getElementById(\"filter\");\n            let searchButton = document.getElementById(\"search\");\n            let previousButton = document.getElementById(\"previous\");\n            let nextButton = document.getElementById(\"next\");\n            let feedback = document.getElementById(\"feedback\");\n            let pageCount = document.getElementById(\"pageCount\");\n            let endpoint = \"https://io.zongzechen.com/data\";\n\n            search(page); // initial fetch\n\n            searchButton.addEventListener('click', () => { // search button\n                page = 0; // reset search index\n                search(page); \n                content.innerHTML = \"\";\n            });\n\n            previousButton.addEventListener('click', () => { // fetch the last 10 row\n                if (page > 0) {\n                    page --;\n                    search(page);\n                    content.innerHTML = \"\";\n                }\n            });\n\n            nextButton.addEventListener('click', () => { // fetch the next 10 row\n                page ++;\n                search(page);\n                content.innerHTML = \"\";\n            });\n\n            filter.addEventListener(\"keypress\", (e) => {\n                if (e.key === \"Enter\") searchButton.click();\n            })\n\n            function search(index) {\n                pageCount.innerHTML = `Page ${page + 1}`;\n                let query = filter.value; // get query topic\n                getData(`${endpoint}?topic=${query}&index=${index}`); // set the url\n            }\n\n            async function getData(url) {\n                feedback.innerHTML = \"Loading...\";\n                let response = await fetch(url); // raw data back\n                let data = await response.json(); // format to json\n                if (data.length == 0) feedback.innerHTML = \"No match or have reached the end\";\n                else feedback.innerHTML = \"\";\n                parseData(data); // send to parse the data\n            }\n\n            function parseData(data) { // the entire table\n                let example = data[0]; // use the first row as reference\n                let headerRow = document.createElement(\"tr\"); // get the header of the table\n                for (const key in example) {\n                    let newHead = document.createElement(\"th\");\n                    newHead.setAttribute(\"scope\",\"col\");\n                    newHead.innerHTML = key;\n                    headerRow.appendChild(newHead);\n                }\n                content.appendChild(headerRow);\n                \n                for (let i = 0; i < data.length; i++) { // now parse each line of the table\n                    parseLine(data[i]);\n                }\n            }\n\n            function parseLine(line) {\n                let newRow = document.createElement(\"tr\");\n                for (const key in line) {\n                    let newCell = document.createElement(\"td\");\n                    let message = line[key];\n                    newCell.innerHTML = message;\n                    newRow.appendChild(newCell);\n                }\n                    content.appendChild(newRow);    \n            }           \n        </script>\n    </body>\n</html>",
        "x": 710,
        "y": 1120,
        "wires": [
            [
                "1b32b653176d1a99"
            ]
        ]
    },
    {
        "id": "51fc5c5958bcf5c4",
        "type": "sqlite",
        "z": "7274d2a37cb1887b",
        "mydb": "924c087d3c5776c6",
        "sqlquery": "msg.topic",
        "sql": "INSERT INTO skylab VALUES(msg.payload[\"topic\"],msg.payload[\"data\"],msg.payload[\"time\"]);",
        "name": "skylab",
        "x": 1070,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "1db850ba158e876d",
        "type": "sqlite",
        "z": "7274d2a37cb1887b",
        "mydb": "924c087d3c5776c6",
        "sqlquery": "msg.topic",
        "sql": "INSERT INTO skylab VALUES(msg.payload[\"topic\"],msg.payload[\"data\"],msg.payload[\"time\"]);",
        "name": "skylab",
        "x": 810,
        "y": 1040,
        "wires": [
            [
                "b29b0eea87a563e1"
            ]
        ]
    },
    {
        "id": "4b444dde82306c94",
        "type": "function",
        "z": "7274d2a37cb1887b",
        "name": "Sql statement",
        "func": "let index = msg.req.query.index;\nlet limit = 50;\n\nmsg.topic = `SELECT * FROM skylab\nWHERE topic LIKE '%${msg.req.query.topic}%'\nORDER BY time DESC\nLimit ${limit} OFFSET ${index * limit};`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1040,
        "wires": [
            [
                "1db850ba158e876d"
            ]
        ]
    },
    {
        "id": "f0d5ebce24cac7f3",
        "type": "debug",
        "z": "7274d2a37cb1887b",
        "name": "requested data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 1000,
        "wires": []
    },
    {
        "id": "b29b0eea87a563e1",
        "type": "function",
        "z": "7274d2a37cb1887b",
        "name": "stringify JSON",
        "func": "msg.payload = JSON.stringify(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1040,
        "wires": [
            [
                "f0d5ebce24cac7f3",
                "066e398e2cb6b354"
            ]
        ]
    },
    {
        "id": "3e1d8af804dce012",
        "type": "http in",
        "z": "7274d2a37cb1887b",
        "name": "",
        "url": "/data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 440,
        "y": 1040,
        "wires": [
            [
                "4b444dde82306c94"
            ]
        ]
    },
    {
        "id": "0aabf67a07aa5b5d",
        "type": "http response",
        "z": "7274d2a37cb1887b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1430,
        "y": 1040,
        "wires": []
    },
    {
        "id": "066e398e2cb6b354",
        "type": "change",
        "z": "7274d2a37cb1887b",
        "name": "add JSON header",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "application/json",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1250,
        "y": 1040,
        "wires": [
            [
                "0aabf67a07aa5b5d"
            ]
        ]
    },
    {
        "id": "9ce4a230f4fface3",
        "type": "comment",
        "z": "7274d2a37cb1887b",
        "name": "Request for sqlite data",
        "info": "",
        "x": 240,
        "y": 1040,
        "wires": []
    },
    {
        "id": "2b2a4ab97967c38d",
        "type": "websocket-listener",
        "path": "/buffer",
        "wholemsg": "false"
    },
    {
        "id": "2e733719eb0925d3",
        "type": "websocket-listener",
        "path": "/sensorValues",
        "wholemsg": "false"
    },
    {
        "id": "7961d7c24e47da7b",
        "type": "mqtt-broker",
        "name": "Kai's MQTT",
        "broker": "9.tcp.ngrok.io",
        "port": "24004",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "924c087d3c5776c6",
        "type": "sqlitedb",
        "db": "/home/zongze/ITP-energy/skylab.db",
        "mode": "RW"
    }
]